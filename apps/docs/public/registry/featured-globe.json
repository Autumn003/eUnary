{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "featured-globe",
  "type": "registry:ui",
  "title": "Featured Globe",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "Interactive 3D globe with scroll-triggered text animations.",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge",
    "cobe",
    "react-spring",
    "@tsparticles/react",
    "@tsparticles/engine",
    "@tsparticles/slim"
  ],
  "files": [
    {
      "path": "../docs/components/ui/featured-globe.tsx",
      "content": "'use client';\n\nimport { useEffect, useRef } from 'react';\nimport createGlobe from 'cobe';\nimport { useSpring } from 'react-spring';\nimport { Sparkles } from './sparkles';\nimport {\n    motion,\n    useScroll,\n    useTransform,\n    useMotionTemplate,\n} from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ninterface props {\n    globeClassName?: string;\n    containerClassName?: string;\n    textClassName?: string;\n    text?: string;\n    textSize?: 'xl' | 'lg' | 'md' | 'sm';\n    globeSize?: number;\n    globeRotateDirection?: 'left' | 'right';\n}\n\nexport const FeaturedGlobe = ({\n    globeClassName,\n    containerClassName,\n    textClassName,\n    text = 'EUNARY UI',\n    textSize = 'md',\n    globeSize = 500,\n    globeRotateDirection = 'right',\n}: props) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const { scrollYProgress } = useScroll({\n        target: containerRef,\n        offset: ['start end', 'end center'],\n    });\n\n    const textY = useTransform(\n        scrollYProgress,\n        [0, 0.25, 0.5, 0.75],\n        [300, 100, 0, -100]\n    );\n    const textOpacity = useTransform(\n        scrollYProgress,\n        [0, 0.25, 0.5, 0.75],\n        [0, 0, 0.5, 1]\n    );\n    const textScale = useTransform(\n        scrollYProgress,\n        [0, 0.25, 0.5, 0.75],\n        [0.8, 0.85, 0.9, 1]\n    );\n    const textBlur = useTransform(\n        scrollYProgress,\n        [0, 0.2, 0.4, 0.6],\n        [9, 6, 3, 0]\n    );\n\n    const getTextSizeClasses = () => {\n        switch (textSize) {\n            case 'sm':\n                return 'text-4xl sm:text-5xl md:text-6xl lg:text-7xl';\n            case 'md':\n                return 'text-5xl sm:text-6xl md:text-7xl lg:text-8xl';\n            case 'lg':\n                return 'text-6xl sm:text-7xl md:text-8xl lg:text-9xl';\n            case 'xl':\n            default:\n                return 'text-6xl sm:text-7xl md:text-8xl lg:text-9xl xl:text-[10rem]';\n        }\n    };\n    const textSizeClasses = getTextSizeClasses();\n\n    return (\n        <div className=\"relative h-full w-full\">\n            <div\n                ref={containerRef}\n                className={cn(\n                    'sticky flex min-h-[30rem] w-full items-center justify-center overflow-hidden',\n                    containerClassName\n                )}\n            >\n                {/* Globe Component */}\n                <div className=\"absolute -bottom-48 z-20 flex aspect-[1] items-center justify-center\">\n                    <Globe\n                        globeSize={globeSize}\n                        globeClassName={globeClassName}\n                        globeRotateDirection={globeRotateDirection}\n                    />\n                </div>\n\n                {/* Animated Text */}\n                <motion.div\n                    style={{\n                        y: textY,\n                        opacity: textOpacity,\n                        scale: textScale,\n                        filter: useMotionTemplate`blur(${textBlur}px)`,\n                    }}\n                    className=\"absolute z-10 flex items-center justify-center text-nowrap\"\n                >\n                    <div\n                        className={cn(\n                            'bg-gradient-to-b from-white to-gray-600 bg-clip-text text-center font-bold text-transparent',\n                            textSizeClasses,\n                            textClassName\n                        )}\n                    >\n                        {text}\n                    </div>\n                </motion.div>\n\n                {/* Background Sparkles */}\n                <Sparkles\n                    background=\"transparent\"\n                    minSize={0.4}\n                    maxSize={1}\n                    particleDensity={50}\n                    className=\"z-0 h-full w-full\"\n                    particleColor=\"#ffffff\"\n                    speed={2}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst Globe = ({\n    globeClassName,\n    globeSize,\n    globeRotateDirection,\n}: {\n    globeClassName?: string;\n    globeSize: number;\n    globeRotateDirection?: 'left' | 'right';\n}) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const pointerInteracting = useRef<number | null>(null);\n    const pointerInteractionMovement = useRef(0);\n\n    const [{ r }, api] = useSpring(() => ({\n        r: 0,\n        config: {\n            mass: 1,\n            tension: 280,\n            friction: 40,\n            precision: 0.001,\n        },\n    }));\n\n    useEffect(() => {\n        let phi = 0;\n        const width: number = globeSize;\n        if (!canvasRef.current) return;\n\n        const globe = createGlobe(canvasRef.current, {\n            devicePixelRatio: 2,\n            width: width * 2,\n            height: width * 2,\n            phi: 0,\n            theta: 0.3,\n            dark: 1,\n            diffuse: 3,\n            mapSamples: 16000,\n            mapBrightness: 1.2,\n            baseColor: [1, 1, 1],\n            markerColor: [40 / 255, 100 / 255, 215 / 255],\n            glowColor: [255 / 255, 255 / 255, 255 / 255],\n            markers: [\n                {\n                    location: [28.61402, 77.22955], // Delhi\n                    size: 0.1,\n                },\n                {\n                    location: [40.75833, -73.99167], // New York\n                    size: 0.2,\n                },\n                {\n                    location: [22.575, 88.325], // Kolkata\n                    size: 0.05,\n                },\n                {\n                    location: [25.18333, 55.26667], // Dubai\n                    size: 0.05,\n                },\n            ],\n\n            onRender: (state) => {\n                // This prevents rotation while dragging\n                if (!pointerInteracting.current) {\n                    // Called on every animation frame.\n                    // `state` will be an empty object, return updated params.\n\n                    globeRotateDirection === 'left'\n                        ? (phi -= 0.005)\n                        : (phi += 0.005);\n                }\n                state.phi = phi + r.get();\n                state.width = width * 2;\n                state.height = width * 2;\n            },\n        });\n        setTimeout(\n            () => canvasRef.current && (canvasRef.current.style.opacity = '1')\n        );\n\n        return () => {\n            globe.destroy();\n        };\n    }, []);\n\n    return (\n        <div\n            className={cn('rounded-full', globeClassName)}\n            style={{\n                width: 500,\n                height: 500,\n                maxWidth: 600,\n                aspectRatio: 1,\n                margin: 'auto',\n                position: 'relative',\n            }}\n        >\n            <canvas\n                ref={canvasRef}\n                onPointerDown={(e) => {\n                    pointerInteracting.current =\n                        e.clientX - pointerInteractionMovement.current;\n                    canvasRef.current &&\n                        (canvasRef.current.style.cursor = 'grabbing');\n                }}\n                onPointerUp={() => {\n                    pointerInteracting.current = null;\n                    canvasRef.current &&\n                        (canvasRef.current.style.cursor = 'grab');\n                }}\n                onPointerOut={() => {\n                    pointerInteracting.current = null;\n                    canvasRef.current &&\n                        (canvasRef.current.style.cursor = 'grab');\n                }}\n                onMouseMove={(e) => {\n                    if (pointerInteracting.current !== null) {\n                        const delta = e.clientX - pointerInteracting.current;\n                        pointerInteractionMovement.current = delta;\n                        api.start({\n                            r: delta / 200,\n                        });\n                    }\n                }}\n                onTouchMove={(e) => {\n                    if (pointerInteracting.current !== null && e.touches[0]) {\n                        const delta =\n                            e.touches[0].clientX - pointerInteracting.current;\n                        pointerInteractionMovement.current = delta;\n                        api.start({\n                            r: delta / 100,\n                        });\n                    }\n                }}\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    cursor: 'grab',\n                    contain: 'layout paint size',\n                    opacity: 0,\n                    transition: 'opacity 1s ease',\n                }}\n            />\n        </div>\n    );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/featured-globe.tsx"
    },
    {
      "path": "../docs/components/ui/sparkles.tsx",
      "content": "'use client';\n\nimport { useEffect, useId, useState } from 'react';\nimport Particles, { initParticlesEngine } from '@tsparticles/react';\nimport { type Container, type ISourceOptions } from '@tsparticles/engine';\nimport { loadSlim } from '@tsparticles/slim';\nimport { cn } from '@/lib/utils';\nimport { motion, useAnimation } from 'motion/react';\n\ntype ParticlesProps = {\n    className?: string;\n    background?: string;\n    particleSize?: number;\n    minSize?: number;\n    maxSize?: number;\n    speed?: number;\n    particleColor?: string;\n    particleDensity?: number;\n    id?: any;\n};\n\nexport const Sparkles = ({\n    className,\n    background,\n    minSize,\n    maxSize,\n    speed,\n    particleColor,\n    particleDensity,\n    id,\n}: ParticlesProps) => {\n    const [init, setInit] = useState(false);\n\n    const generatedId = useId();\n\n    useEffect(() => {\n        initParticlesEngine(async (engine) => {\n            await loadSlim(engine);\n        }).then(() => {\n            setInit(true);\n        });\n    }, []);\n\n    const fadeInControls = useAnimation();\n\n    const particlesLoaded = async (container?: Container): Promise<void> => {\n        container &&\n            fadeInControls.start({\n                opacity: 1,\n                transition: { duration: 1 },\n            });\n    };\n\n    const options: ISourceOptions = {\n        background: {\n            color: {\n                value: background || '#0d47a1',\n            },\n        },\n        fullScreen: {\n            enable: false,\n            zIndex: 1,\n        },\n\n        particles: {\n            color: {\n                value: particleColor || '#ffffff',\n            },\n            move: {\n                angle: {\n                    offset: 0,\n                    value: 90,\n                },\n                center: {\n                    x: 50,\n                    y: 50,\n                    mode: 'percent',\n                    radius: 0,\n                },\n                enable: true,\n                random: false,\n                size: false,\n                speed: {\n                    min: 0.1,\n                    max: 1,\n                },\n            },\n            number: {\n                density: {\n                    enable: true,\n                    width: 400,\n                    height: 400,\n                },\n                limit: {\n                    mode: 'delete',\n                    value: 0,\n                },\n                value: particleDensity || 120,\n            },\n            opacity: {\n                value: {\n                    min: 0.1,\n                    max: 1,\n                },\n                animation: {\n                    enable: true,\n                    speed: speed || 4,\n                    sync: false,\n                    mode: 'auto',\n                    startValue: 'random',\n                    destroy: 'none',\n                },\n            },\n            shape: {\n                close: true,\n                fill: true,\n                options: {},\n                type: 'circle',\n            },\n            size: {\n                value: {\n                    min: minSize || 1,\n                    max: maxSize || 3,\n                },\n            },\n        },\n    };\n\n    if (init) {\n        return (\n            <motion.div\n                animate={fadeInControls}\n                className={cn('opacity-0', className)}\n            >\n                <Particles\n                    className=\"h-full w-full\"\n                    id={id || generatedId}\n                    particlesLoaded={particlesLoaded}\n                    options={options}\n                />\n            </motion.div>\n        );\n    }\n\n    return <></>;\n};\n",
      "type": "registry:ui",
      "target": "components/ui/sparkles.tsx"
    }
  ]
}