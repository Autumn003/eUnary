{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scrolling-macbook",
  "type": "registry:ui",
  "title": "Scrolling Macbook",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "A scrolling macbook with hover effect.",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "../docs/components/ui/scrolling-macbook.tsx",
      "content": "'use client';\n\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { motion, useScroll, useSpring, useTransform } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ninterface MacbookScrollProps {\n    children: React.ReactNode;\n    className?: string;\n    contentClassName?: string;\n}\n\nconst ScrollingMacbook = ({\n    children,\n    className,\n    contentClassName,\n}: MacbookScrollProps) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [isMounted, setIsMounted] = useState(false);\n    const ref = useRef<HTMLDivElement>(null);\n\n    const { scrollYProgress } = useScroll({\n        target: ref,\n        offset: ['start end', 'end start'],\n    });\n\n    // Set initial state and handle mounting\n    useEffect(() => {\n        setIsMounted(true);\n    }, []);\n\n    const rotateX = useTransform(\n        scrollYProgress,\n        [0.1, 0.3, 0.5, 0.6],\n        [-75, -25, 0, 10]\n    );\n    const topGlowRotateX = useTransform(\n        scrollYProgress,\n        [0.1, 0.3, 0.5],\n        [60, 30, 0]\n    );\n    const topGlowOpacity = useTransform(\n        scrollYProgress,\n        [0.1, 0.3, 0.5],\n        [1, 0.5, 0]\n    );\n    const opacity = useTransform(scrollYProgress, [0.1, 0.3, 0.5], [0, 0.5, 1]);\n    const scale = useTransform(scrollYProgress, [0.1, 0.3, 0.5], [1, 0.7, 0.4]);\n\n    const smoothRotateX = useSpring(rotateX, { stiffness: 100, damping: 20 });\n    const smoothTopGlowRotateX = useSpring(topGlowRotateX, {\n        stiffness: 100,\n        damping: 20,\n    });\n    const hoverRotateX = useSpring(isMounted ? smoothRotateX.get() : -75, {\n        stiffness: 150,\n        damping: 25,\n    });\n\n    // Memoize hover handlers to prevent unnecessary re-renders\n    const handleHoverStart = useCallback(() => {\n        setIsHovered(true);\n        hoverRotateX.set(0);\n    }, [hoverRotateX]);\n\n    const handleHoverEnd = useCallback(() => {\n        setIsHovered(false);\n        hoverRotateX.set(smoothRotateX.get());\n    }, [hoverRotateX, smoothRotateX]);\n\n    useEffect(() => {\n        if (!isHovered && isMounted) {\n            const unsubscribe = smoothRotateX.on('change', (latest) => {\n                hoverRotateX.set(latest);\n            });\n            return unsubscribe;\n        }\n    }, [isHovered, smoothRotateX, hoverRotateX, isMounted]);\n\n    const hoverAnimation = {\n        scale: isHovered ? 1.5 : 1,\n        translateY: isHovered ? -50 : 0,\n        translateX: isHovered ? 100 : 0,\n        opacity: isHovered ? 1 : 0,\n    };\n\n    const backdropAnimation = {\n        scale: isHovered ? 1.5 : 1,\n        translateY: isHovered ? -50 : 0,\n        translateX: isHovered ? 100 : 0,\n        backdropFilter: isHovered ? 'blur(10px)' : 'none',\n    };\n\n    const springTransition = {\n        type: 'spring' as const,\n        stiffness: 300,\n        damping: 20,\n    };\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative isolate z-20 mx-auto flex justify-center',\n                className\n            )}\n        >\n            <motion.div\n                className=\"group relative isolate [perspective:1000px]\"\n                onHoverStart={handleHoverStart}\n                onHoverEnd={handleHoverEnd}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: isMounted ? 1 : 0 }}\n                transition={{ duration: 0.5 }}\n            >\n                <motion.div\n                    style={{ rotateX: hoverRotateX }}\n                    className=\"absolute bottom-[calc(100%-0.0625rem)] h-[8.5rem] w-[13rem] origin-bottom translate-x-3 rounded-t border-2 border-gray-600 px-0.5 py-1 shadow-[inset_0_0_0_2px_theme(colors.black/75%)] [--screen-off-color:theme(colors.gray.900)] [--screen-on-color:theme(colors.gray.600)] [perspective:65px] [transform-style:preserve-3d] before:absolute before:inset-[-0.0625rem] before:z-10 before:rounded-[inherit] before:bg-gradient-to-b before:from-black/40 before:from-[0.0625rem] before:to-black/80 before:transition-opacity before:duration-1000 before:group-hover:opacity-0 before:group-hover:duration-500 after:absolute after:inset-x-[-1px] after:top-0 after:-z-10 after:h-[0.125rem] after:[transform:rotateX(90deg)_translateY(-1px)] after:rounded-t-full after:bg-gray-500\"\n                >\n                    {/* Webcam notch */}\n                    <motion.div\n                        animate={{\n                            opacity: isHovered ? 0 : 1,\n                            transition: {\n                                delay: isHovered ? 0 : 0.2,\n                                duration: 0.01,\n                            },\n                        }}\n                        className=\"absolute inset-y-0 right-[46%] z-50 h-1 w-6 rounded-b-xs bg-black/75\"\n                    />\n\n                    {/* Top glow effect */}\n                    <motion.div\n                        className=\"absolute inset-x-0 top-0.5 h-10 origin-top bg-gradient-to-b from-white/15 to-transparent blur-sm\"\n                        style={{\n                            rotateX: smoothTopGlowRotateX,\n                            opacity: isHovered ? 0 : topGlowOpacity,\n                            scale,\n                        }}\n                    />\n\n                    {/* Reflection effect */}\n                    <motion.div\n                        style={{ opacity }}\n                        className=\"absolute inset-0 z-30 overflow-hidden rounded-[inherit] transition-opacity duration-500\"\n                    >\n                        <div className=\"absolute size-[110%] -translate-x-10 -translate-y-1/2 -rotate-45 bg-gradient-to-l from-white/10\" />\n                    </motion.div>\n\n                    {/* Blur background for content */}\n                    <motion.div\n                        animate={hoverAnimation}\n                        transition={springTransition}\n                        className=\"z-40 h-full w-full rounded-sm bg-cyan-400/20 blur-lg\"\n                    />\n\n                    {/* Content container */}\n                    <motion.div\n                        animate={backdropAnimation}\n                        transition={springTransition}\n                        className={cn(\n                            contentClassName,\n                            'absolute inset-0 z-40 h-full w-full overflow-hidden rounded-sm bg-cyan-400/10'\n                        )}\n                    >\n                        {children}\n                    </motion.div>\n                </motion.div>\n\n                {/* MacBook base */}\n                <div className=\"relative z-10 h-[0.75rem] w-[14.5rem] rounded-t-sm rounded-b-lg bg-gradient-to-b from-gray-600 from-65% to-gray-700 shadow-[inset_0_2px_0px] shadow-white/10 before:absolute before:top-0 before:left-1/2 before:h-[0.25rem] before:w-[2.5rem] before:-translate-x-1/2 before:rounded-b-full before:bg-gray-700 before:shadow-[inset_2px_0_1px_-2px_theme(colors.black/50%),inset_-2px_0_1px_-2px_theme(colors.black/50%),0_1px_0_theme(colors.white/10%)]\" />\n            </motion.div>\n        </div>\n    );\n};\n\nexport default ScrollingMacbook;\n",
      "type": "registry:ui",
      "target": "components/ui/scrolling-macbook.tsx"
    }
  ]
}