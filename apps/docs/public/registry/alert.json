{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "title": "Alert",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "A callout alert for user attention.",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "../docs/components/ui/alert.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion, spring } from 'motion/react';\nimport { useEffect, useState } from 'react';\n\nconst alertVariants = cva(\n    'relative max-w-[26rem] rounded-xl border border-red-400 bg-red-400/20 px-3 py-2 backdrop-blur-2xl',\n    {\n        variants: {\n            variant: {\n                default: 'bg-neutral-400/20 border-neutral-400/30',\n                success:\n                    'bg-emerald-400/20 border-emerald-400/30 text-emerald-400',\n                error: 'bg-red-400/20 border-red-400/30 text-red-400',\n                processing:\n                    'bg-amber-400/20 border-amber-400/30 text-amber-500',\n            },\n        },\n        defaultVariants: {\n            variant: 'default',\n        },\n    }\n);\n\ninterface AlertProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof alertVariants> {\n    delay?: number;\n}\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(\n    ({ className, variant, delay = 9000, ...props }, ref) => {\n        const [isVisible, setIsVisible] = useState(true);\n\n        useEffect(() => {\n            const timer = setTimeout(() => {\n                setIsVisible(false);\n            }, delay);\n            return () => clearTimeout(timer);\n        }, [delay]);\n\n        return (\n            <div {...props}>\n                <AnimatePresence>\n                    {isVisible && (\n                        <motion.div\n                            ref={ref}\n                            className={cn(\n                                alertVariants({ variant }),\n                                className\n                            )}\n                            initial={{\n                                opacity: 0,\n                                scale: 0.98,\n                                filter: 'blur(10px)',\n                            }}\n                            animate={{\n                                opacity: 1,\n                                scale: 1,\n                                filter: 'blur(0px)',\n                            }}\n                            transition={{\n                                type: 'spring',\n                                stiffness: 100,\n                                damping: 15,\n                            }}\n                            exit={{\n                                opacity: 0,\n                                scale: 0.98,\n                                filter: 'blur(10px)',\n                            }}\n                        >\n                            {props.children}\n                            <button\n                                onClick={() => setIsVisible(false)}\n                                className=\"absolute top-2 right-2 flex h-5 w-5 cursor-pointer items-center justify-center rounded-md text-center font-semibold transition-all duration-200 hover:text-lg hover:text-neutral-400\"\n                            >\n                                <i className=\"ri-close-line\"></i>\n                            </button>\n                        </motion.div>\n                    )}\n                </AnimatePresence>\n            </div>\n        );\n    }\n);\n\nconst AlertTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h5\n        ref={ref}\n        className={cn(\n            'mb-1 leading-none font-medium tracking-tight',\n            className\n        )}\n        {...props}\n    />\n));\n\nconst AlertDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            'text-sm text-neutral-500 [&_p]:leading-relaxed',\n            className\n        )}\n        {...props}\n    />\n));\n\nexport { Alert, AlertTitle, AlertDescription };\n",
      "type": "registry:ui",
      "target": "components/ui/alert.tsx"
    }
  ]
}