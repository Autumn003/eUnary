{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "title": "Alert",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "A callout alert for user attention.",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "../docs/components/ui/alert.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { cn } from '@/lib/utils';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport { AnimatePresence, motion, spring } from 'motion/react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst alertVariants = cva(\r\n    'relative max-w-[26rem] rounded-xl border border-red-400 bg-red-400/20 px-3 py-2 backdrop-blur-2xl',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default: 'bg-neutral-400/20 border-neutral-400/30',\r\n                success:\r\n                    'bg-emerald-400/20 border-emerald-400/30 text-emerald-400',\r\n                error: 'bg-red-400/20 border-red-400/30 text-red-400',\r\n                processing:\r\n                    'bg-amber-400/20 border-amber-400/30 text-amber-500',\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: 'default',\r\n        },\r\n    }\r\n);\r\n\r\ninterface AlertProps\r\n    extends React.HTMLAttributes<HTMLDivElement>,\r\n        VariantProps<typeof alertVariants> {\r\n    delay?: number;\r\n}\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(\r\n    ({ className, variant, delay = 9000, ...props }, ref) => {\r\n        const [isVisible, setIsVisible] = useState(true);\r\n\r\n        useEffect(() => {\r\n            const timer = setTimeout(() => {\r\n                setIsVisible(false);\r\n            }, delay);\r\n            return () => clearTimeout(timer);\r\n        }, [delay]);\r\n\r\n        return (\r\n            <div {...props}>\r\n                <AnimatePresence>\r\n                    {isVisible && (\r\n                        <motion.div\r\n                            ref={ref}\r\n                            className={cn(\r\n                                alertVariants({ variant }),\r\n                                className\r\n                            )}\r\n                            initial={{\r\n                                opacity: 0,\r\n                                scale: 0.98,\r\n                                filter: 'blur(10px)',\r\n                            }}\r\n                            animate={{\r\n                                opacity: 1,\r\n                                scale: 1,\r\n                                filter: 'blur(0px)',\r\n                            }}\r\n                            transition={{\r\n                                type: 'spring',\r\n                                stiffness: 100,\r\n                                damping: 15,\r\n                            }}\r\n                            exit={{\r\n                                opacity: 0,\r\n                                scale: 0.98,\r\n                                filter: 'blur(10px)',\r\n                            }}\r\n                        >\r\n                            {props.children}\r\n                            <button\r\n                                onClick={() => setIsVisible(false)}\r\n                                className=\"absolute top-2 right-2 flex h-5 w-5 cursor-pointer items-center justify-center rounded-md text-center font-semibold transition-all duration-200 hover:text-lg hover:text-neutral-400\"\r\n                            >\r\n                                <i className=\"ri-close-line\"></i>\r\n                            </button>\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nconst AlertTitle = React.forwardRef<\r\n    HTMLParagraphElement,\r\n    React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n    <h5\r\n        ref={ref}\r\n        className={cn(\r\n            'mb-1 leading-none font-medium tracking-tight',\r\n            className\r\n        )}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst AlertDescription = React.forwardRef<\r\n    HTMLParagraphElement,\r\n    React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n    <div\r\n        ref={ref}\r\n        className={cn(\r\n            'text-sm text-neutral-500 [&_p]:leading-relaxed',\r\n            className\r\n        )}\r\n        {...props}\r\n    />\r\n));\r\n\r\nexport { Alert, AlertTitle, AlertDescription };\r\n",
      "type": "registry:ui",
      "target": "components/ui/alert.tsx"
    }
  ]
}