{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shiny-button",
  "type": "registry:ui",
  "title": "Shiny Button",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "A button with a shiny hover effect.",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "../docs/components/ui/shiny-button.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport { motion } from 'framer-motion';\n\nexport const ShinyButton = ({\n    className,\n    containerClassName,\n    children,\n    onClick,\n    shine,\n    shineDirection = 'right',\n    shineDelay = 2,\n    shineDuration = 1.5,\n    spinGlow,\n    spinGlowDirection = 'bottom',\n    spinGlowRotate,\n    spinGlowSpeed = 4,\n}: {\n    className?: string;\n    containerClassName?: string;\n    children?: React.ReactNode;\n    onClick?: () => void;\n    shine?: 'always' | 'hover';\n    shineDirection?: 'top' | 'bottom' | 'left' | 'right';\n    shineDelay?: number;\n    shineDuration?: number;\n    spinGlow?: 'always' | 'hover';\n    spinGlowDirection?: 'top' | 'bottom' | 'left' | 'right';\n    spinGlowSpeed?: number;\n    spinGlowRotate?: 'clockwise' | 'anticlockwise';\n}) => {\n    const getGradientAngle = (\n        direction: 'top' | 'bottom' | 'left' | 'right'\n    ) => {\n        switch (direction) {\n            case 'right':\n                return 45;\n            case 'bottom':\n                return 135;\n            case 'left':\n                return 225;\n            case 'top':\n                return 315;\n            default:\n                return 135;\n        }\n    };\n\n    // Function to get shine animation direction\n    const getShineAnimation = (\n        direction: 'top' | 'bottom' | 'left' | 'right'\n    ) => {\n        switch (direction) {\n            case 'right':\n                return { x: '-100%', y: '0%' };\n            case 'left':\n                return { x: '200%', y: '0%' };\n            case 'top':\n                return { x: '0%', y: '200%' };\n            case 'bottom':\n                return { x: '0%', y: '-100%' };\n            default:\n                return { x: '-100%', y: '0%' };\n        }\n    };\n\n    // Function to get shine end animation\n    const getShineEndAnimation = (\n        direction: 'top' | 'bottom' | 'left' | 'right'\n    ) => {\n        switch (direction) {\n            case 'right':\n                return { x: '200%', y: '0%' };\n            case 'left':\n                return { x: '-100%', y: '0%' };\n            case 'top':\n                return { x: '0%', y: '-100%' };\n            case 'bottom':\n                return { x: '0%', y: '200%' };\n            default:\n                return { x: '200%', y: '0%' };\n        }\n    };\n\n    const gradientAngle = getGradientAngle(spinGlowDirection);\n    const shineInitial = getShineAnimation(shineDirection);\n    const shineAnimate = getShineEndAnimation(shineDirection);\n\n    const rotationAnimation = spinGlowRotate\n        ? {\n              rotate: spinGlowRotate === 'clockwise' ? 360 : -360,\n          }\n        : {};\n\n    return (\n        <div\n            className={cn(\n                'group relative flex h-fit w-fit items-center justify-center overflow-hidden rounded-full bg-neutral-300 p-[1.5px] shadow-lg dark:bg-neutral-600',\n                containerClassName\n            )}\n        >\n            {/* Spinning glow effect */}\n            {spinGlow && (\n                <motion.div\n                    className={cn(\n                        'absolute inset-[-1000%] transition-opacity duration-300',\n                        spinGlow === 'always'\n                            ? 'opacity-100'\n                            : 'opacity-0 group-hover:opacity-100'\n                    )}\n                    style={{\n                        background: `conic-gradient(from ${gradientAngle}deg, transparent 0, #FFFFFF 45deg, transparent 90deg)`,\n                    }}\n                    animate={rotationAnimation}\n                    transition={{\n                        duration: spinGlowSpeed,\n                        ease: 'linear',\n                        repeat: Infinity,\n                    }}\n                />\n            )}\n\n            <button\n                onClick={onClick}\n                className={cn(\n                    `relative z-10 inline-flex h-full w-full cursor-pointer items-center justify-center overflow-hidden rounded-full bg-slate-200 px-5 py-3 font-medium text-neutral-600 backdrop-blur-3xl transition-all duration-200 dark:bg-slate-900 dark:text-white`,\n                    className\n                )}\n            >\n                {/* Shine overlay */}\n                {shine && (\n                    <motion.div\n                        className={cn(\n                            'absolute inset-0 z-20 bg-gradient-to-r from-transparent via-white/40 to-transparent transition-opacity duration-300 dark:via-white/20',\n                            shineDirection === 'top' ||\n                                shineDirection === 'bottom'\n                                ? '-skew-y-12 bg-gradient-to-b'\n                                : '-skew-x-12 bg-gradient-to-r',\n                            shine === 'always'\n                                ? 'opacity-100'\n                                : 'opacity-0 group-hover:opacity-100'\n                        )}\n                        initial={shineInitial}\n                        animate={shineAnimate}\n                        transition={{\n                            duration: shineDuration,\n                            ease: 'easeInOut',\n                            repeat: Infinity,\n                            repeatDelay: shineDelay,\n                        }}\n                    />\n                )}\n                {children}\n            </button>\n        </div>\n    );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/shiny-button.tsx"
    }
  ]
}