{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ios-notifications-stack",
  "type": "registry:ui",
  "title": "IOS Notifications Stack",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "Animated iOS-style notification stack with expandable and collapsible layers",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "../docs/components/ui/ios-notifications-stack.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useCallback, useState } from 'react';\n\ninterface Notification {\n    id: number;\n    title: string;\n    description: string;\n}\n\ninterface NotificationProps {\n    notifications: Notification[];\n    className?: string;\n}\n\n// Shared transition config\nconst TRANSITION = {\n    delay: 0.02,\n    duration: 0.3,\n    ease: 'easeInOut',\n};\n\n// Animation variants\nconst containerVariants = {\n    initial: {\n        scale: 1.1,\n        y: 0,\n    },\n    animate: {\n        scale: [1.1, 1.07, 1.08],\n        y: 10,\n        transition: {\n            staggerChildren: 0.01,\n        },\n    },\n    collapse: {\n        scale: 1,\n        y: 0,\n        transition: {\n            delay: 0.3, // Delay to allow additional notifications to collapse first\n            staggerChildren: 0.01,\n            staggerDirection: -1,\n        },\n    },\n};\n\nconst notificationVariants: Record<'0' | '1' | '2', any> = {\n    '0': {\n        initial: {\n            y: -10,\n            scale: 0.9,\n        },\n        animate: {\n            y: 70,\n            scale: 0.95,\n            transition: {\n                ...TRANSITION,\n            },\n        },\n        collapse: {\n            y: -10,\n            scale: 0.9,\n            transition: {\n                ...TRANSITION,\n            },\n        },\n    },\n    '1': {\n        initial: {\n            y: -20,\n            scale: 0.8,\n        },\n        animate: {\n            y: 140,\n            scale: 0.95,\n            transition: {\n                ...TRANSITION,\n            },\n        },\n        collapse: {\n            y: -20,\n            scale: 0.8,\n            transition: {\n                ...TRANSITION,\n            },\n        },\n    },\n    '2': {\n        initial: {\n            scale: 1,\n        },\n        animate: {\n            scale: 0.95,\n            transition: {\n                ...TRANSITION,\n            },\n        },\n        collapse: {\n            scale: 1,\n            transition: {\n                ...TRANSITION,\n            },\n        },\n    },\n};\n\nconst headerVariants = {\n    initial: {\n        opacity: 0,\n        y: 25,\n        scale: 1,\n    },\n    animate: {\n        opacity: 1,\n        y: 0,\n        scale: 1\n    },\n};\n\nconst collapseButtonVariants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n};\n\nconst additionalNotificationVariants = {\n    hidden: {\n        opacity: 0,\n        y: -20,\n        scale: 0.8,\n        filter: 'blur(2px)',\n    },\n    visible: {\n        opacity: 1,\n        y: 0,\n        scale: 0.97,\n        filter: 'blur(0px)'\n    },\n    exit: {\n        opacity: 0,\n        y: -20,\n        scale: 0.8,\n        filter: 'blur(2px)'\n    },\n};\n\n// Container variants for staggered animations\nconst additionalContainerVariants = {\n    hidden: {\n        transition: {\n            staggerChildren: 0.05,\n            staggerDirection: 1,\n        },\n    },\n    visible: {\n        transition: {\n            staggerChildren: 0.05,\n            staggerDirection: 1,\n        },\n    },\n    exit: {\n        transition: {\n            staggerChildren: 0.03,\n            staggerDirection: -1,\n        },\n    },\n};\n\nconst showMoreButtonVariants = {\n    hidden: {\n        opacity: 0,\n        transition: {\n            delay: 0.1,\n            duration: 0.2,\n        },\n    },\n    visible: {\n        opacity: 1,\n        transition: {\n            delay: 0.2,\n            duration: 0.2,\n        },\n    },\n};\n\nexport const IOSNotificationsStack = ({\n    notifications,\n    className,\n}: NotificationProps) => {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [showAll, setShowAll] = useState(false);\n    const [isCollapsing, setIsCollapsing] = useState(false);\n\n    const toggleExpanded = useCallback(() => {\n        if (isExpanded) {\n            // Start collapse sequence\n            setIsCollapsing(true);\n\n            // First hide additional notifications if they're showing\n            if (showAll) {\n                setShowAll(false);\n                // Wait for additional notifications to collapse, then collapse main stack\n                setTimeout(() => {\n                    setIsExpanded(false);\n                    setIsCollapsing(false);\n                }, 300); // Duration of additional notifications exit animation\n            } else {\n                // No additional notifications, collapse main stack directly\n                setIsExpanded(false);\n                setIsCollapsing(false);\n            }\n        } else {\n            // Expand\n            setIsExpanded(true);\n            setIsCollapsing(false);\n        }\n    }, [isExpanded, showAll]);\n\n    const collapseStack = useCallback(() => {\n        setIsCollapsing(true);\n\n        // First hide additional notifications if they're showing\n        if (showAll) {\n            setShowAll(false);\n            // Wait for additional notifications to collapse, then collapse main stack\n            setTimeout(() => {\n                setIsExpanded(false);\n                setIsCollapsing(false);\n            }, 300);\n        } else {\n            // No additional notifications, collapse main stack directly\n            setIsExpanded(false);\n            setIsCollapsing(false);\n        }\n    }, [showAll]);\n\n    const toggleShowAll = useCallback((e: any) => {\n        e.stopPropagation();\n        setShowAll((prev) => !prev);\n    }, []);\n\n    const handleKeyDown = useCallback(\n        (event: any) => {\n            if (event.key === 'Enter' || event.key === ' ') {\n                event.preventDefault();\n                toggleExpanded();\n            }\n        },\n        [toggleExpanded]\n    );\n\n    const visibleNotifications = notifications.slice(0, 3);\n    const additionalNotifications = notifications.slice(3);\n\n    // Determine animation state for container\n    const getContainerAnimationState = () => {\n        if (isCollapsing && !showAll) {\n            return 'collapse';\n        }\n        return isExpanded ? 'animate' : 'initial';\n    };\n\n    return (\n        <div className={cn('relative overflow-hidden', className)}>\n            <motion.div\n                initial=\"initial\"\n                animate={getContainerAnimationState()}\n                variants={containerVariants}\n                exit=\"collapse\"\n                className=\"relative flex h-[30rem] flex-col gap-2 overflow-auto\"\n                style={{\n                    scrollbarWidth: 'none',\n                    msOverflowStyle: 'none',\n                }}\n            >\n                {/* Header */}\n                <motion.div\n                    variants={headerVariants}\n                    \n        transition={ {\n            delay: 0.2,\n            ease: 'easeInOut',\n            duration: 0.3,\n        }}\n                    className=\"flex w-full items-center justify-between px-2 text-white\"\n                >\n                    <span className=\"font-medium text-neutral-700 dark:text-neutral-400\">\n                        Notifications\n                    </span>\n                    <motion.button\n                        className=\"rounded-full bg-white/50 px-3 py-1 text-sm font-medium text-neutral-600 backdrop-blur-lg transition-colors duration-200 hover:bg-white/30 disabled:opacity-50 dark:bg-black/50 dark:text-neutral-300\"\n                        variants={collapseButtonVariants}\n                        initial=\"hidden\"\n                        animate={isExpanded ? 'visible' : 'hidden'}\n                        transition={{ duration: 0.2 }}\n                        onClick={collapseStack}\n                        disabled={!isExpanded}\n                        aria-label=\"Collapse notifications\"\n                    >\n                        Collapse\n                    </motion.button>\n                </motion.div>\n\n                {/* Notification Stack Container */}\n                <div className=\"relative\">\n                    {/* Main Stack */}\n                    <div\n                        className=\"relative h-52 w-72 cursor-pointer\"\n                        onClick={toggleExpanded}\n                        onKeyDown={handleKeyDown}\n                        tabIndex={0}\n                        role=\"button\"\n                        aria-label={\n                            isExpanded\n                                ? 'Collapse notifications'\n                                : 'Expand notifications'\n                        }\n                        aria-expanded={isExpanded}\n                    >\n                        {visibleNotifications.map((notification, index) => (\n                            <motion.div\n                                key={`main-${notification.id}-${index}`}\n                                variants={\n                                    notificationVariants[\n                                        String(index) as '0' | '1' | '2'\n                                    ]\n                                }\n                                className={`absolute top-0 left-0 h-16 w-72 rounded-2xl bg-white/50 px-3 py-2 text-neutral-900 shadow-lg backdrop-blur-lg dark:bg-black/50 dark:text-white ${\n                                    index === 2\n                                        ? 'z-20'\n                                        : index === 1\n                                          ? 'z-0'\n                                          : 'z-10'\n                                }`}\n                                style={{\n                                    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',\n                                }}\n                            >\n                                <div className=\"text-sm leading-tight font-semibold text-neutral-900 dark:text-neutral-100\">\n                                    {notification.title}\n                                </div>\n                                <p className=\"mt-1 line-clamp-2 text-xs leading-tight text-neutral-600 dark:text-neutral-400\">\n                                    {notification.description}\n                                </p>\n                            </motion.div>\n                        ))}\n                    </div>\n\n                    {/* Show more/less button */}\n                    {isExpanded && notifications.length > 3 && (\n                        <motion.div\n                            className=\"mt-2 flex\"\n                            variants={showMoreButtonVariants}\n                            initial=\"hidden\"\n                            animate=\"visible\"\n                            exit=\"hidden\"\n                        >\n                            <button\n                                className=\"mr-2 ml-auto text-sm font-medium text-neutral-700 transition-colors dark:text-neutral-400\"\n                                onClick={toggleShowAll}\n                            >\n                                {showAll\n                                    ? `Show less`\n                                    : `Show ${notifications.length - 3} more`}\n                            </button>\n                        </motion.div>\n                    )}\n\n                    {/* Additional Notifications with AnimatePresence */}\n                    <AnimatePresence mode=\"wait\">\n                        {isExpanded &&\n                            showAll &&\n                            additionalNotifications.length > 0 && (\n                                <motion.div\n                                    key=\"additional-notifications\"\n                                    className=\"mt-4 space-y-2\"\n                                    initial=\"hidden\"\n                                    animate=\"visible\"\n                                    exit=\"exit\"\n                                    variants={additionalContainerVariants}\n                                >\n                                    {additionalNotifications.map(\n                                        (notification, index) => (\n                                            <motion.div\n                                                key={`additional-${notification.id}-${index}`}\n                                                variants={\n                                                    additionalNotificationVariants\n                                                }\n                                                \n        transition={ {\n            duration: 0.3,\n            ease: 'easeInOut',\n        }}\n                                                className=\"h-16 w-72 rounded-2xl bg-white/50 px-3 py-2 text-neutral-900 shadow-lg backdrop-blur-lg dark:bg-black/50 dark:text-white\"\n                                                style={{\n                                                    boxShadow:\n                                                        '0 4px 20px rgba(0, 0, 0, 0.15)',\n                                                }}\n                                            >\n                                                <div className=\"text-sm leading-tight font-semibold text-neutral-900 dark:text-neutral-100\">\n                                                    {notification.title}\n                                                </div>\n                                                <p className=\"mt-1 line-clamp-2 text-xs leading-tight text-neutral-600 dark:text-neutral-400\">\n                                                    {notification.description}\n                                                </p>\n                                            </motion.div>\n                                        )\n                                    )}\n                                </motion.div>\n                            )}\n                    </AnimatePresence>\n                </div>\n            </motion.div>\n        </div>\n    );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/ios-notifications-stack.tsx"
    }
  ]
}