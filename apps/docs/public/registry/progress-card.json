{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-card",
  "type": "registry:ui",
  "title": "Progress Card",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "Animated progress card with percentage display and task breakdown to visualize project completion effortlessly",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge",
    "@tabler/icons-react"
  ],
  "files": [
    {
      "path": "../docs/components/ui/progress-card.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport { IconChecks } from '@tabler/icons-react';\nimport { motion, animate } from 'motion/react';\nimport { ComponentType, useEffect, useState } from 'react';\n\ninterface Task {\n    icon: ComponentType<{ className?: string }>;\n    label?: string;\n    completed: number;\n    total: number;\n}\n\ninterface ProgressCardProps {\n    title?: string;\n    description?: string;\n    themeColor?: string;\n    tasks?: Task[];\n    percentage?: number;\n    className?: string;\n}\n\nexport const ProgressCard = ({\n    title,\n    description,\n    themeColor = '#7f9cf5',\n    tasks,\n    percentage,\n    className,\n}: ProgressCardProps) => {\n    const circumference = 2 * Math.PI * 45; // radius of 45\n    const strokeDasharray = circumference;\n\n    const [displayPercentage, setDisplayPercentage] = useState(0);\n\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n    useEffect(() => {\n        // Check initial theme\n        const checkTheme = () => {\n            const isDark =\n                document.documentElement.classList.contains('dark') ||\n                document.body.classList.contains('dark');\n\n            if (\n                !isDark &&\n                !document.documentElement.classList.contains('light')\n            ) {\n                const savedTheme = localStorage?.getItem('theme');\n                return savedTheme === 'dark';\n            }\n\n            return isDark;\n        };\n\n        setIsDarkMode(checkTheme());\n\n        // Listen for theme changes\n        const observer = new MutationObserver(() => {\n            setIsDarkMode(checkTheme());\n        });\n\n        observer.observe(document.documentElement, {\n            attributes: true,\n            attributeFilter: ['class'],\n        });\n\n        return () => observer.disconnect();\n    }, []);\n\n    const titleColor = isDarkMode ? '#FFFFFF' : themeColor;\n    const percentageColor = isDarkMode ? '#FFFFFF' : `${themeColor}cc`;\n\n    useEffect(() => {\n        if (percentage) {\n            const controls = animate(0, percentage, {\n                duration: 1.5,\n                ease: 'easeInOut',\n                delay: 0.2,\n                onUpdate: (value) => {\n                    setDisplayPercentage(Math.round(value));\n                },\n            });\n\n            return () => controls.stop();\n        }\n    }, [percentage]);\n\n    return (\n        <div\n            className={cn(\n                'group relative overflow-hidden rounded-2xl p-6 backdrop-blur-md transition-transform duration-300 hover:scale-103',\n                className\n            )}\n            style={{\n                background: isDarkMode ? '#5252521a' : `${themeColor}1a`,\n            }}\n        >\n            {/* Background geometric shapes */}\n            <div className=\"absolute inset-0 opacity-10\">\n                <div\n                    className=\"absolute top-8 right-12 h-16 w-16 rotate-12 rounded-lg border-2 transition-all duration-300 group-hover:scale-105 group-hover:rotate-30\"\n                    style={{ borderColor: themeColor }}\n                ></div>\n                <div\n                    className=\"absolute right-8 bottom-12 h-12 w-12 rounded-full transition-transform duration-300 group-hover:-translate-1 group-hover:scale-125\"\n                    style={{ background: themeColor }}\n                ></div>\n                <div\n                    className=\"absolute top-16 right-4 h-8 w-8 rotate-45 rounded border-2 transition-all duration-300 group-hover:scale-105 group-hover:rotate-12\"\n                    style={{ borderColor: `${themeColor}80` }}\n                ></div>\n            </div>\n\n            {/* Header */}\n            <div className=\"mb-6 flex items-start justify-between\">\n                <div>\n                    {title && (\n                        <h2\n                            className=\"mb-2 text-xl font-semibold transition-colors duration-300\"\n                            style={{ color: titleColor }}\n                        >\n                            {title}\n                        </h2>\n                    )}\n                    {description && (\n                        <p className=\"text-sm leading-relaxed text-neutral-500 dark:text-neutral-300\">\n                            {description}\n                        </p>\n                    )}\n                </div>\n\n                {percentage ? (\n                    <div className=\"mt-1 flex space-x-1\">\n                        {[...Array(5)].map((_, index) => {\n                            const dotThreshold = (index + 1) * 20; // Each dot represents 20%\n                            const isColored =\n                                percentage && percentage >= dotThreshold;\n\n                            return (\n                                <motion.div\n                                    key={index}\n                                    className={cn(\n                                        'h-1.5 w-1.5 rounded-full transition-colors duration-300'\n                                    )}\n                                    style={{\n                                        background: isColored\n                                            ? themeColor\n                                            : '#a0aec0',\n                                    }}\n                                    initial={{ scale: 0.8, opacity: 0.5 }}\n                                    animate={{\n                                        scale: 1.1,\n                                        opacity: 1,\n                                    }}\n                                    transition={{\n                                        duration: 0.3,\n                                        delay: index * 0.1 + 0.8,\n                                        ease: 'easeOut',\n                                    }}\n                                />\n                            );\n                        })}\n                    </div>\n                ) : (\n                    <IconChecks className=\"h-6 w-6 text-neutral-500 dark:text-neutral-300\" />\n                )}\n            </div>\n\n            {/* Circular Progress */}\n            {percentage && (\n                <div className=\"mt-4 flex justify-center\">\n                    <div className=\"relative\">\n                        <svg\n                            width=\"120\"\n                            height=\"120\"\n                            className=\"-rotate-90 transform transition-all duration-300 group-hover:scale-105 group-hover:-rotate-120\"\n                        >\n                            {/* Background circle */}\n                            <circle\n                                cx=\"60\"\n                                cy=\"60\"\n                                r=\"45\"\n                                stroke=\"rgb(55, 65, 81)\"\n                                strokeWidth=\"4\"\n                                fill=\"transparent\"\n                            />\n                            {/* Animated Progress circle */}\n                            <motion.circle\n                                cx=\"60\"\n                                cy=\"60\"\n                                r=\"45\"\n                                stroke={themeColor}\n                                strokeWidth=\"4\"\n                                fill=\"transparent\"\n                                strokeLinecap=\"round\"\n                                strokeDasharray={strokeDasharray}\n                                initial={{ strokeDashoffset: circumference }}\n                                animate={{\n                                    strokeDashoffset:\n                                        circumference -\n                                        (percentage / 100) * circumference,\n                                }}\n                                transition={{\n                                    duration: 1.5,\n                                    ease: 'easeInOut',\n                                    delay: 0.2,\n                                }}\n                                style={{\n                                    filter: `drop-shadow(0 0 8px ${themeColor}80)`,\n                                }}\n                            />\n                        </svg>\n                        {/* Animated Percentage text */}\n                        <div className=\"absolute inset-0 flex items-center justify-center transition-transform duration-300 group-hover:scale-105\">\n                            <motion.span\n                                className=\"text-3xl font-bold transition-colors duration-300\"\n                                style={{ color: percentageColor }}\n                                initial={{ opacity: 0, scale: 0.5 }}\n                                animate={{ opacity: 1, scale: 1 }}\n                                transition={{\n                                    duration: 0.8,\n                                    ease: 'easeOut',\n                                    delay: 0.5,\n                                }}\n                            >\n                                {displayPercentage}%\n                            </motion.span>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {/* Tasks List */}\n            {tasks && tasks.length > 0 && (\n                <div className=\"space-y-5\">\n                    {tasks.map((task, index) => {\n                        const Icon = task.icon;\n                        const progressWidth =\n                            (task.completed / task.total) * 100;\n                        const [isTaskHovered, setIsTaskHovered] =\n                            useState(false);\n\n                        return (\n                            <motion.div\n                                key={index}\n                                className=\"relative cursor-pointer space-y-3\"\n                                onHoverStart={() => setIsTaskHovered(true)}\n                                onHoverEnd={() => setIsTaskHovered(false)}\n                                whileHover={{\n                                    x: 5,\n                                    transition: { duration: 0.2 },\n                                }}\n                            >\n                                <div className=\"absolute inset-0 z-0\" />\n                                {/* Task Info */}\n                                <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex items-center space-x-3\">\n                                        <motion.div\n                                            animate={{\n                                                scale: isTaskHovered ? 1.2 : 1,\n                                                rotate: isTaskHovered ? -10 : 0,\n                                                color: isTaskHovered\n                                                    ? 'rgb(124, 134, 255)'\n                                                    : 'rgb(156, 163, 175)',\n                                            }}\n                                            transition={{ duration: 0.3 }}\n                                        >\n                                            <Icon className=\"h-5 w-5 text-gray-400\" />\n                                        </motion.div>\n                                        <span className=\"font-medium text-gray-600 dark:text-white\">\n                                            {task.label}\n                                        </span>\n                                    </div>\n                                    <motion.span\n                                        className=\"text-sm text-neutral-500 dark:text-neutral-300\"\n                                        animate={{\n                                            opacity: isTaskHovered ? 1 : 0.8,\n                                            scale: isTaskHovered ? 1.05 : 1,\n                                        }}\n                                        transition={{ duration: 0.2 }}\n                                    >\n                                        {task.completed} of {task.total} ready\n                                    </motion.span>\n                                </div>\n\n                                {/* Animated Progress Bar */}\n                                <div className=\"relative\">\n                                    {/* Background dashed line */}\n                                    <div\n                                        className=\"h-0.5 border-t-2 border-dashed border-gray-600\"\n                                        style={{ width: '100%' }}\n                                    ></div>\n\n                                    {/* Animated Progress line */}\n                                    <motion.div\n                                        className=\"absolute top-0 h-0.5\"\n                                        initial={{ width: '0%' }}\n                                        animate={{\n                                            width: `${progressWidth}%`,\n                                            height: isTaskHovered\n                                                ? '2px'\n                                                : '2px',\n                                        }}\n                                        transition={{\n                                            duration: 1.2,\n                                            ease: 'easeOut',\n                                            delay: 0.8 + index * 0.1,\n                                        }}\n                                        style={{\n                                            filter: isTaskHovered\n                                                ? `drop-shadow(0 0 8px ${themeColor}80)`\n                                                : `drop-shadow(0 0 4px ${themeColor}80)`,\n                                            boxShadow: isTaskHovered\n                                                ? `0 0 8px ${themeColor}80`\n                                                : 'none',\n                                            background: themeColor,\n                                        }}\n                                    />\n                                </div>\n                            </motion.div>\n                        );\n                    })}\n                </div>\n            )}\n        </div>\n    );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/progress-card.tsx"
    }
  ]
}