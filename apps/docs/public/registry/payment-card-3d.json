{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-card-3d",
  "type": "registry:ui",
  "title": "Payment Card 3D",
  "author": "Hemant Sharma <hemant.develop@gmail.com>",
  "description": "An interactive 3D payment card component with flip, tilt, glare, and secure reveal animations, perfect for showcasing credit or debit card details",
  "dependencies": [
    "class-variance-authority",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "../docs/components/ui/payment-card-3d.tsx",
      "content": "'use client';\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Nfc } from 'lucide-react';\nimport { AnimatePresence, motion } from 'motion/react';\n\nconst MAX_TILT = 12;\n\ninterface cardProps {\n    cardHolder: string;\n    cardNumber: number;\n    cardExpiryMonth: number;\n    cardExpiryYear: number;\n    cardBankName: string;\n    themeColor: string;\n    chipColor?: 'silver' | 'gold';\n}\n\nexport const PaymentCard3D = ({\n    cardHolder,\n    cardNumber,\n    cardExpiryMonth,\n    cardExpiryYear,\n    cardBankName,\n    themeColor,\n    chipColor = 'gold',\n}: cardProps) => {\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [isHidden, setIsHidden] = useState(true);\n    const [tilt, setTilt] = useState({ x: 0, y: 0 });\n    const [glarePosition, setGlarePosition] = useState({ x: 50, y: 50 });\n    const cardRef = useRef<HTMLDivElement | null>(null);\n    const rafRef = useRef<number | null>(null);\n\n    const handlePointerMove = useCallback((e: React.PointerEvent) => {\n        if (!cardRef.current) return;\n\n        const rect = cardRef.current.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        const glareX = (x / rect.width) * 100;\n        const glareY = (y / rect.height) * 100;\n        const rotateX = ((y - centerY) / centerY) * -MAX_TILT;\n        const rotateY = ((x - centerX) / centerX) * MAX_TILT;\n\n        if (rafRef.current) cancelAnimationFrame(rafRef.current);\n        rafRef.current = requestAnimationFrame(() => {\n            setTilt({ x: rotateX, y: rotateY });\n            setGlarePosition({ x: glareX, y: glareY });\n        });\n    }, []);\n\n    const handlePointerLeave = useCallback(() => {\n        if (rafRef.current) cancelAnimationFrame(rafRef.current);\n        setTilt({ x: 0, y: 0 });\n    }, []);\n\n    const toggleFlip = useCallback(() => {\n        setIsFlipped((s) => !s);\n        setIsHidden(true);\n    }, []);\n    const toggleHidden = useCallback((e: React.MouseEvent) => {\n        e.stopPropagation();\n        setIsHidden((s) => !s);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            if (rafRef.current) cancelAnimationFrame(rafRef.current);\n        };\n    }, []);\n\n    const computedRotateX = isFlipped ? -tilt.x : tilt.x;\n    const computedRotateZ = (isFlipped ? -1 : 1) * tilt.y * 0.08;\n    const glareStyle = {\n        background: `radial-gradient(circle at ${glarePosition.x}% ${glarePosition.y}%, rgba(212,212,216,0.2) 0%, rgba(161,161,170,0.15) 20%, transparent 60%)`,\n    };\n\n    const cardNumberFormatted =\n        cardNumber\n            .toString()\n            .match(/.{1,4}/g)\n            ?.join(' ') || cardNumber;\n    const cardNumberMasked = `XXXX XXXX XXXX ${cardNumber.toString().slice(-4)}`;\n\n    return (\n        <div className=\"flex w-full items-center justify-center p-4 perspective-[1000]\">\n            <motion.div\n                ref={cardRef}\n                onClick={toggleFlip}\n                onPointerMove={handlePointerMove}\n                onPointerLeave={handlePointerLeave}\n                style={{ transformStyle: 'preserve-3d' }}\n                animate={{\n                    rotateY: isFlipped ? 180 : 0,\n                    rotateX: computedRotateX,\n                    rotateZ: computedRotateZ,\n                }}\n                transition={{\n                    duration: 0.8,\n                    type: 'spring',\n                    stiffness: 70,\n                    damping: 12,\n                    rotateX: { duration: 0.25 },\n                    rotateZ: { duration: 0.25 },\n                }}\n                whileHover={{ scale: 1.02 }}\n                className=\"group relative z-10 aspect-[5/3] w-full max-w-sm cursor-pointer\"\n            >\n                {/* FRONT */}\n                <CardFace\n                    isVisible={!isFlipped}\n                    glareStyle={glareStyle}\n                    baseClass=\"from-zinc-900 via-zinc-800 to-zinc-950 shadow-[inset_-5px_5px_15px_5px_rgba(63,63,70,0.8)]\"\n                >\n                    <div className=\"absolute left-0 h-full w-20 bg-zinc-950/50\" />\n                    <div className=\"absolute inset-0 size-[120%] -translate-x-30 -translate-y-1/2 -rotate-30 bg-gradient-to-l from-zinc-500/5 via-zinc-600/10 to-transparent\" />\n                    <div\n                        className=\"absolute inset-0 opacity-10\"\n                        style={{\n                            background: `radial-gradient(circle at 30% 50%, ${themeColor}, transparent 50%)`,\n                        }}\n                    />\n\n                    <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                        <div className=\"relative h-full w-full text-zinc-100\">\n                            <motion.div\n                                className=\"absolute bottom-0 left-14\"\n                                whileHover={{ scale: 1.05 }}\n                                transition={{ type: 'spring', stiffness: 300 }}\n                            >\n                                <Chip chipColor={chipColor} />\n                            </motion.div>\n                            <Nfc className=\"absolute top-5 right-5 h-5 w-5 sm:h-7 sm:w-7\" />\n                        </div>\n\n                        <div className=\"relative h-full w-full\">\n                            <div className=\"absolute bottom-5 flex w-full items-end-safe justify-between px-4\">\n                                <div className=\"px-1\">\n                                    <p className=\"text-[10px] font-semibold text-zinc-400 sm:text-xs\">\n                                        Card Holder\n                                    </p>\n                                    <div\n                                        className=\"text-sm font-semibold uppercase [text-shadow:_2px_2px_3px_#000000,_0.3px_-0.3px_0_rgba(255,195,68,0.5)] sm:text-base\"\n                                        style={{\n                                            color: themeColor,\n                                        }}\n                                    >\n                                        {cardHolder}\n                                    </div>\n                                </div>\n\n                                <div className=\"flex min-h-8 w-fit max-w-20 items-end text-center text-[10px] font-semibold text-wrap text-zinc-400 uppercase sm:min-h-10 sm:max-w-24 sm:text-xs\">\n                                    {cardBankName}\n                                </div>\n                            </div>\n\n                            <p className=\"absolute bottom-1 w-full text-center text-[10px] font-semibold text-zinc-500/50 sm:bottom-2 sm:text-xs\">\n                                Tap to flip\n                            </p>\n                        </div>\n                    </div>\n                </CardFace>\n\n                {/* BACK */}\n                <CardFace\n                    isVisible={isFlipped}\n                    glareStyle={glareStyle}\n                    baseClass=\"from-zinc-950 via-zinc-800 to-zinc-900 shadow-[inset_5px_5px_15px_5px_rgba(63,63,70,0.8)]\"\n                    style={{ transform: 'rotateY(180deg)' }}\n                >\n                    <div className=\"absolute right-0 h-full w-20 bg-zinc-950/50\" />\n                    <div className=\"absolute inset-0 size-[120%] -translate-x-30 -translate-y-1/2 -rotate-30 bg-gradient-to-l from-zinc-500/5 via-zinc-600/10 to-transparent\" />\n                    <div\n                        className=\"absolute inset-0 opacity-10\"\n                        style={{\n                            background: `radial-gradient(circle at 70% 50%, ${themeColor}, transparent 50%)`,\n                        }}\n                    />\n\n                    <button\n                        onClick={toggleHidden}\n                        className=\"absolute top-2 right-2 z-10 h-5 w-10 rounded-full bg-zinc-800 text-xs font-semibold text-zinc-400 transition-colors duration-300 hover:text-zinc-300\"\n                    >\n                        {isHidden ? 'Show' : 'Hide'}\n                    </button>\n\n                    <div className=\"h-full w-full\">\n                        <div className=\"flex min-h-8 w-5/6 items-center px-3 text-center sm:min-h-10 sm:px-5\">\n                            <p className=\"py-1 text-[8px] text-zinc-400 text-shadow-none sm:text-[9px]\">\n                                Use this card securely. Do not share your CVV or\n                                PIN with anyone.\n                            </p>\n                        </div>\n                        <div className=\"h-10 w-full bg-zinc-950 sm:h-12\" />\n                        <div\n                            className=\"text-shadow:_2px_2px_3px_#000000,_0.3px_-0.3px_0_rgba(255,195,68,0.5)] flex h-full w-full flex-col items-center justify-center gap-2 px-4 font-mono sm:gap-4 sm:px-6\"\n                            style={{\n                                color: themeColor,\n                            }}\n                        >\n                            <div className=\"h-full w-full\">\n                                <div>\n                                    <span className=\"text-[5px] text-zinc-400 text-shadow-none sm:text-[6px]\">\n                                        AUTHORIZED SIGNATURE\n                                    </span>\n                                    <div className=\"flex h-6 w-3/4 items-center justify-end bg-gradient-to-r from-zinc-800 via-zinc-700/50 to-transparent px-1 text-xs tracking-widest sm:h-8 sm:px-2 sm:text-sm\">\n                                        <div className=\"overflow-hidden rounded-md bg-zinc-700/60 px-1\">\n                                            <AnimatePresence mode=\"popLayout\">\n                                                <motion.div\n                                                    key={\n                                                        isHidden\n                                                            ? 'hidden-cvv'\n                                                            : 'visible-cvv'\n                                                    }\n                                                    initial={{\n                                                        opacity: 0,\n                                                        x: -10,\n                                                        filter: 'blur(5px)',\n                                                    }}\n                                                    animate={{\n                                                        opacity: 1,\n                                                        x: 0,\n                                                        filter: 'blur(0)',\n                                                    }}\n                                                    exit={{\n                                                        opacity: 0,\n                                                        x: -10,\n                                                        filter: 'blur(5px)',\n                                                    }}\n                                                    transition={{\n                                                        duration: 0.5,\n                                                        delay: 0.1,\n                                                    }}\n                                                    className=\"text-xs tracking-widest sm:text-sm\"\n                                                >\n                                                    {isHidden ? 'CVV' : '123'}\n                                                </motion.div>\n                                            </AnimatePresence>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <AnimatePresence mode=\"popLayout\">\n                                    <motion.div\n                                        key={isHidden ? 'hidden' : 'visible'}\n                                        initial={{\n                                            opacity: 0,\n                                            x: -10,\n                                            filter: 'blur(5px)',\n                                        }}\n                                        animate={{\n                                            opacity: 1,\n                                            x: 0,\n                                            filter: 'blur(0)',\n                                        }}\n                                        exit={{\n                                            opacity: 0,\n                                            x: 10,\n                                            filter: 'blur(5px)',\n                                        }}\n                                        transition={{ duration: 0.5 }}\n                                        className=\"text-sm tracking-[3px] sm:text-base sm:tracking-[4px]\"\n                                    >\n                                        {isHidden\n                                            ? cardNumberMasked\n                                            : cardNumberFormatted}\n                                    </motion.div>\n\n                                    <div className=\"mt-1\">\n                                        <p className=\"text-[10px] font-semibold text-zinc-400 text-shadow-none sm:text-xs\">\n                                            Expires\n                                        </p>\n                                        <motion.div\n                                            key={\n                                                isHidden\n                                                    ? 'hidden-date'\n                                                    : 'visible-date'\n                                            }\n                                            initial={{\n                                                opacity: 0,\n                                                x: -10,\n                                                filter: 'blur(5px)',\n                                            }}\n                                            animate={{\n                                                opacity: 1,\n                                                x: 0,\n                                                filter: 'blur(0)',\n                                            }}\n                                            exit={{\n                                                opacity: 0,\n                                                x: -10,\n                                                filter: 'blur(5px)',\n                                            }}\n                                            transition={{\n                                                duration: 0.5,\n                                                delay: 0.1,\n                                            }}\n                                            className=\"text-xs tracking-widest sm:text-sm\"\n                                        >\n                                            {isHidden\n                                                ? 'MM/YY'\n                                                : `${cardExpiryMonth}/${cardExpiryYear}`}\n                                        </motion.div>\n                                    </div>\n                                </AnimatePresence>\n                            </div>\n\n                            <p className=\"absolute bottom-1 w-full text-center text-[10px] font-semibold text-zinc-500/50 text-shadow-none sm:bottom-2 sm:text-xs\">\n                                Tap to flip back\n                            </p>\n                        </div>\n                    </div>\n                </CardFace>\n            </motion.div>\n        </div>\n    );\n};\n\ninterface CardFaceProps {\n    isVisible: boolean;\n    glareStyle: React.CSSProperties;\n    baseClass: string;\n    style?: React.CSSProperties;\n    children: React.ReactNode;\n}\n\nconst CardFace: React.FC<CardFaceProps> = React.memo(\n    ({ isVisible, glareStyle, baseClass, style, children }) => (\n        <motion.div\n            animate={{ opacity: isVisible ? 1 : 0.5 }}\n            transition={{ duration: 0.18 }}\n            style={{\n                backfaceVisibility: 'hidden',\n                willChange: 'transform',\n                ...style,\n            }}\n            className={`absolute inset-0 overflow-hidden rounded-2xl border border-zinc-700/50 bg-gradient-to-br ${baseClass}`}\n        >\n            <div\n                className=\"pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100\"\n                style={glareStyle}\n            />\n\n            {isVisible && (\n                <>\n                    <motion.div\n                        initial={{ x: '-200%' }}\n                        animate={{ x: '150%' }}\n                        transition={{ duration: 1.5, ease: 'easeOut' }}\n                        className=\"absolute inset-0 z-20 bg-gradient-to-r from-transparent via-white/10 to-transparent\"\n                        style={{\n                            transformOrigin: 'left',\n                            pointerEvents: 'none',\n                            mixBlendMode: 'screen',\n                        }}\n                    />\n                </>\n            )}\n\n            {children}\n        </motion.div>\n    )\n);\n\nconst Chip = React.memo(({ chipColor }: { chipColor: 'silver' | 'gold' }) => (\n    <svg\n        width=\"50\"\n        height=\"35\"\n        viewBox=\"0 0 200 150\"\n        stroke=\"black\"\n        strokeWidth=\"4\"\n    >\n        <defs>\n            <linearGradient\n                id=\"chipGradient\"\n                x1=\"0%\"\n                y1=\"0%\"\n                x2=\"100%\"\n                y2=\"100%\"\n            >\n                <stop\n                    offset=\"0%\"\n                    stopColor={chipColor === 'silver' ? '#f4f4f5' : '#FFE177'}\n                />\n                <stop\n                    offset=\"50%\"\n                    stopColor={chipColor === 'silver' ? '#d4d4d8' : '#FFC344'}\n                />\n                <stop\n                    offset=\"100%\"\n                    stopColor={chipColor === 'silver' ? '#71717a' : '#FF8C00'}\n                />\n            </linearGradient>\n        </defs>\n        <rect\n            x=\"10\"\n            y=\"10\"\n            width=\"180\"\n            height=\"130\"\n            rx=\"20\"\n            fill=\"url(#chipGradient)\"\n        />\n        <path\n            d=\"M70,15 v40 a20,20 0 0,0 -10,20 a20,20 0 0,0 10,20 v40\"\n            fill=\"none\"\n        />\n        <path\n            d=\"M130,15 v40 a20,20 0 0,1 10,20 a20,20 0 0,1 -10,20 v40\"\n            fill=\"none\"\n        />\n        <line x1=\"10\" y1=\"55\" x2=\"70\" y2=\"55\" />\n        <line x1=\"130\" y1=\"55\" x2=\"190\" y2=\"55\" />\n        <line x1=\"10\" y1=\"95\" x2=\"70\" y2=\"95\" />\n        <line x1=\"130\" y1=\"95\" x2=\"190\" y2=\"95\" />\n    </svg>\n));\n\n// 'use client';\n\n// import React, { useCallback, useEffect, useRef, useState } from 'react';\n// import { Nfc } from 'lucide-react';\n// import { AnimatePresence, motion } from 'motion/react';\n// import { cn } from '@/lib/utils';\n\n// const MAX_TILT = 12;\n\n// interface cardProps {\n//     cardHolder: string;\n//     cardNumber: number;\n//     cardExpiryMonth: number;\n//     cardExpiryYear: number;\n//     cardBankName: string;\n//     themeColor: string;\n//     chipColor?: 'silver' | 'gold';\n//     className?: string;\n// }\n\n// export const PaymentCard3D = ({\n//     cardHolder,\n//     cardNumber,\n//     cardExpiryMonth,\n//     cardExpiryYear,\n//     cardBankName,\n//     themeColor,\n//     chipColor = 'gold',\n//     className,\n// }: cardProps) => {\n//     const [isFlipped, setIsFlipped] = useState(false);\n//     const [isHidden, setIsHidden] = useState(true);\n//     const [tilt, setTilt] = useState({ x: 0, y: 0 });\n//     const [glarePosition, setGlarePosition] = useState({ x: 50, y: 50 });\n//     const cardRef = useRef<HTMLDivElement | null>(null);\n//     const rafRef = useRef<number | null>(null);\n\n//     const handlePointerMove = useCallback((e: React.PointerEvent) => {\n//         if (!cardRef.current) return;\n\n//         const rect = cardRef.current.getBoundingClientRect();\n//         const x = e.clientX - rect.left;\n//         const y = e.clientY - rect.top;\n//         const centerX = rect.width / 2;\n//         const centerY = rect.height / 2;\n\n//         const glareX = (x / rect.width) * 100;\n//         const glareY = (y / rect.height) * 100;\n//         const rotateX = ((y - centerY) / centerY) * -MAX_TILT;\n//         const rotateY = ((x - centerX) / centerX) * MAX_TILT;\n\n//         if (rafRef.current) cancelAnimationFrame(rafRef.current);\n//         rafRef.current = requestAnimationFrame(() => {\n//             setTilt({ x: rotateX, y: rotateY });\n//             setGlarePosition({ x: glareX, y: glareY });\n//         });\n//     }, []);\n\n//     const handlePointerLeave = useCallback(() => {\n//         if (rafRef.current) cancelAnimationFrame(rafRef.current);\n//         setTilt({ x: 0, y: 0 });\n//     }, []);\n\n//     const toggleFlip = useCallback(() => {\n//         setIsFlipped((s) => !s);\n//         setIsHidden(true);\n//     }, []);\n//     const toggleHidden = useCallback((e: React.MouseEvent) => {\n//         e.stopPropagation();\n//         setIsHidden((s) => !s);\n//     }, []);\n\n//     useEffect(() => {\n//         return () => {\n//             if (rafRef.current) cancelAnimationFrame(rafRef.current);\n//         };\n//     }, []);\n\n//     const computedRotateX = isFlipped ? -tilt.x : tilt.x;\n//     const computedRotateZ = (isFlipped ? -1 : 1) * tilt.y * 0.08;\n//     const glareStyle = {\n//         background: `radial-gradient(circle at ${glarePosition.x}% ${glarePosition.y}%, rgba(212,212,216,0.2) 0%, rgba(161,161,170,0.15) 20%, transparent 60%)`,\n//     };\n\n//     const cardNumberFormatted =\n//         cardNumber\n//             .toString()\n//             .match(/.{1,4}/g)\n//             ?.join(' ') || cardNumber;\n//     const cardNumberMasked = `XXXX XXXX XXXX ${cardNumber.toString().slice(-4)}`;\n\n//     return (\n//         <div className=\"h-full w-full perspective-[1000]\">\n//             <motion.div\n//                 ref={cardRef}\n//                 onClick={toggleFlip}\n//                 onPointerMove={handlePointerMove}\n//                 onPointerLeave={handlePointerLeave}\n//                 style={{ transformStyle: 'preserve-3d' }}\n//                 animate={{\n//                     rotateY: isFlipped ? 180 : 0,\n//                     rotateX: computedRotateX,\n//                     rotateZ: computedRotateZ,\n//                 }}\n//                 transition={{\n//                     duration: 0.8,\n//                     type: 'spring',\n//                     stiffness: 70,\n//                     damping: 12,\n//                     rotateX: { duration: 0.25 },\n//                     rotateZ: { duration: 0.25 },\n//                 }}\n//                 whileHover={{ scale: 1.02 }}\n//                 className={cn(\n//                     'group relative z-10 aspect-[5/3] w-full max-w-sm cursor-pointer overflow-hidden',\n//                     className\n//                 )}\n//             >\n//                 {/* FRONT */}\n//                 <CardFace\n//                     isVisible={!isFlipped}\n//                     glareStyle={glareStyle}\n//                     baseClass=\"from-zinc-900 via-zinc-800 to-zinc-950 shadow-[inset_-5px_5px_15px_5px_rgba(63,63,70,0.8)]\"\n//                 >\n//                     <div className=\"absolute left-0 h-full w-20 bg-zinc-950/50\" />\n//                     <div className=\"absolute inset-0 size-[120%] -translate-x-30 -translate-y-1/2 -rotate-30 bg-gradient-to-l from-zinc-500/5 via-zinc-600/10 to-transparent\" />\n//                     <div\n//                         className=\"absolute inset-0 opacity-10\"\n//                         style={{\n//                             background: `radial-gradient(circle at 30% 50%, ${themeColor}, transparent 50%)`,\n//                         }}\n//                     />\n\n//                     <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n//                         <div className=\"relative h-full w-full text-zinc-100\">\n//                             <motion.div\n//                                 className=\"absolute bottom-0 left-14\"\n//                                 whileHover={{ scale: 1.05 }}\n//                                 transition={{ type: 'spring', stiffness: 300 }}\n//                             >\n//                                 <Chip chipColor={chipColor} />\n//                             </motion.div>\n//                             <Nfc className=\"absolute top-5 right-5 h-5 w-5 sm:h-7 sm:w-7\" />\n//                         </div>\n\n//                         <div className=\"relative h-full w-full\">\n//                             <div className=\"absolute bottom-5 flex w-full items-end-safe justify-between px-4\">\n//                                 <div className=\"px-1\">\n//                                     <p className=\"text-[10px] font-semibold text-zinc-400 sm:text-xs\">\n//                                         Card Holder\n//                                     </p>\n//                                     <div\n//                                         className=\"text-sm font-semibold uppercase [text-shadow:_2px_2px_3px_#000000,_0.3px_-0.3px_0_rgba(255,195,68,0.5)] sm:text-base\"\n//                                         style={{\n//                                             color: themeColor,\n//                                         }}\n//                                     >\n//                                         {cardHolder}\n//                                     </div>\n//                                 </div>\n\n//                                 <div className=\"flex min-h-8 w-fit max-w-20 items-end text-center text-[10px] font-semibold text-wrap text-zinc-400 uppercase sm:min-h-10 sm:max-w-24 sm:text-xs\">\n//                                     {cardBankName}\n//                                 </div>\n//                             </div>\n\n//                             <p className=\"absolute bottom-1 w-full text-center text-[10px] font-semibold text-zinc-500/50 sm:bottom-2 sm:text-xs\">\n//                                 Tap to flip\n//                             </p>\n//                         </div>\n//                     </div>\n//                 </CardFace>\n\n//                 {/* BACK */}\n//                 <CardFace\n//                     isVisible={isFlipped}\n//                     glareStyle={glareStyle}\n//                     baseClass=\"from-zinc-950 via-zinc-800 to-zinc-900 shadow-[inset_5px_5px_15px_5px_rgba(63,63,70,0.8)]\"\n//                     style={{ transform: 'rotateY(180deg)' }}\n//                 >\n//                     <div className=\"absolute right-0 h-full w-20 bg-zinc-950/50\" />\n//                     <div className=\"absolute inset-0 size-[120%] -translate-x-30 -translate-y-1/2 -rotate-30 bg-gradient-to-l from-zinc-500/5 via-zinc-600/10 to-transparent\" />\n//                     <div\n//                         className=\"absolute inset-0 opacity-10\"\n//                         style={{\n//                             background: `radial-gradient(circle at 70% 50%, ${themeColor}, transparent 50%)`,\n//                         }}\n//                     />\n\n//                     <button\n//                         onClick={toggleHidden}\n//                         className=\"absolute top-2 right-2 z-10 h-5 w-10 rounded-full bg-zinc-800 text-xs font-semibold text-zinc-400 transition-colors duration-300 hover:text-zinc-300\"\n//                     >\n//                         {isHidden ? 'Show' : 'Hide'}\n//                     </button>\n\n//                     <div className=\"h-full w-full\">\n//                         <div className=\"flex min-h-8 w-5/6 items-center px-3 text-center sm:min-h-10 sm:px-5\">\n//                             <p className=\"py-1 text-[8px] text-zinc-400 text-shadow-none sm:text-[9px]\">\n//                                 Use this card securely. Do not share your CVV or\n//                                 PIN with anyone.\n//                             </p>\n//                         </div>\n//                         <div className=\"h-10 w-full bg-zinc-950 sm:h-12\" />\n//                         <div\n//                             className=\"text-shadow:_2px_2px_3px_#000000,_0.3px_-0.3px_0_rgba(255,195,68,0.5)] flex h-full w-full flex-col items-center justify-center gap-2 px-4 font-mono sm:gap-4 sm:px-6\"\n//                             style={{\n//                                 color: themeColor,\n//                             }}\n//                         >\n//                             <div className=\"h-full w-full\">\n//                                 <div>\n//                                     <span className=\"text-[5px] text-zinc-400 text-shadow-none sm:text-[6px]\">\n//                                         AUTHORIZED SIGNATURE\n//                                     </span>\n//                                     <div className=\"flex h-6 w-3/4 items-center justify-end bg-gradient-to-r from-zinc-800 via-zinc-700/50 to-transparent px-1 text-xs tracking-widest sm:h-8 sm:px-2 sm:text-sm\">\n//                                         <div className=\"overflow-hidden rounded-md bg-zinc-700/60 px-1\">\n//                                             <AnimatePresence mode=\"popLayout\">\n//                                                 <motion.div\n//                                                     key={\n//                                                         isHidden\n//                                                             ? 'hidden-cvv'\n//                                                             : 'visible-cvv'\n//                                                     }\n//                                                     initial={{\n//                                                         opacity: 0,\n//                                                         x: -10,\n//                                                         filter: 'blur(5px)',\n//                                                     }}\n//                                                     animate={{\n//                                                         opacity: 1,\n//                                                         x: 0,\n//                                                         filter: 'blur(0)',\n//                                                     }}\n//                                                     exit={{\n//                                                         opacity: 0,\n//                                                         x: -10,\n//                                                         filter: 'blur(5px)',\n//                                                     }}\n//                                                     transition={{\n//                                                         duration: 0.5,\n//                                                         delay: 0.1,\n//                                                     }}\n//                                                     className=\"text-xs tracking-widest sm:text-sm\"\n//                                                 >\n//                                                     {isHidden ? 'CVV' : '123'}\n//                                                 </motion.div>\n//                                             </AnimatePresence>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n\n//                                 <AnimatePresence mode=\"popLayout\">\n//                                     <motion.div\n//                                         key={isHidden ? 'hidden' : 'visible'}\n//                                         initial={{\n//                                             opacity: 0,\n//                                             x: -10,\n//                                             filter: 'blur(5px)',\n//                                         }}\n//                                         animate={{\n//                                             opacity: 1,\n//                                             x: 0,\n//                                             filter: 'blur(0)',\n//                                         }}\n//                                         exit={{\n//                                             opacity: 0,\n//                                             x: 10,\n//                                             filter: 'blur(5px)',\n//                                         }}\n//                                         transition={{ duration: 0.5 }}\n//                                         className=\"text-sm tracking-[3px] sm:text-base sm:tracking-[4px]\"\n//                                     >\n//                                         {isHidden\n//                                             ? cardNumberMasked\n//                                             : cardNumberFormatted}\n//                                     </motion.div>\n\n//                                     <div className=\"mt-1\">\n//                                         <p className=\"text-[10px] font-semibold text-zinc-400 text-shadow-none sm:text-xs\">\n//                                             Expires\n//                                         </p>\n//                                         <motion.div\n//                                             key={\n//                                                 isHidden\n//                                                     ? 'hidden-date'\n//                                                     : 'visible-date'\n//                                             }\n//                                             initial={{\n//                                                 opacity: 0,\n//                                                 x: -10,\n//                                                 filter: 'blur(5px)',\n//                                             }}\n//                                             animate={{\n//                                                 opacity: 1,\n//                                                 x: 0,\n//                                                 filter: 'blur(0)',\n//                                             }}\n//                                             exit={{\n//                                                 opacity: 0,\n//                                                 x: -10,\n//                                                 filter: 'blur(5px)',\n//                                             }}\n//                                             transition={{\n//                                                 duration: 0.5,\n//                                                 delay: 0.1,\n//                                             }}\n//                                             className=\"text-xs tracking-widest sm:text-sm\"\n//                                         >\n//                                             {isHidden\n//                                                 ? 'MM/YY'\n//                                                 : `${cardExpiryMonth}/${cardExpiryYear}`}\n//                                         </motion.div>\n//                                     </div>\n//                                 </AnimatePresence>\n//                             </div>\n\n//                             <p className=\"absolute bottom-1 w-full text-center text-[10px] font-semibold text-zinc-500/50 text-shadow-none sm:bottom-2 sm:text-xs\">\n//                                 Tap to flip back\n//                             </p>\n//                         </div>\n//                     </div>\n//                 </CardFace>\n//             </motion.div>\n//         </div>\n//     );\n// };\n\n// interface CardFaceProps {\n//     isVisible: boolean;\n//     glareStyle: React.CSSProperties;\n//     baseClass: string;\n//     style?: React.CSSProperties;\n//     children: React.ReactNode;\n// }\n\n// const CardFace: React.FC<CardFaceProps> = React.memo(\n//     ({ isVisible, glareStyle, baseClass, style, children }) => (\n//         <motion.div\n//             animate={{ opacity: isVisible ? 1 : 0.5 }}\n//             transition={{ duration: 0.18 }}\n//             style={{\n//                 backfaceVisibility: 'hidden',\n//                 willChange: 'transform',\n//                 ...style,\n//             }}\n//             className={`absolute inset-0 overflow-hidden rounded-2xl border border-zinc-700/50 bg-gradient-to-br ${baseClass}`}\n//         >\n//             <div\n//                 className=\"pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100\"\n//                 style={glareStyle}\n//             />\n\n//             {isVisible && (\n//                 <>\n//                     <motion.div\n//                         initial={{ x: '-200%' }}\n//                         animate={{ x: '150%' }}\n//                         transition={{ duration: 1.5, ease: 'easeOut' }}\n//                         className=\"absolute inset-0 z-20 bg-gradient-to-r from-transparent via-white/10 to-transparent\"\n//                         style={{\n//                             transformOrigin: 'left',\n//                             pointerEvents: 'none',\n//                             mixBlendMode: 'screen',\n//                         }}\n//                     />\n//                 </>\n//             )}\n\n//             {children}\n//         </motion.div>\n//     )\n// );\n\n// const Chip = React.memo(({ chipColor }: { chipColor: 'silver' | 'gold' }) => (\n//     <svg\n//         width=\"50\"\n//         height=\"35\"\n//         viewBox=\"0 0 200 150\"\n//         stroke=\"black\"\n//         strokeWidth=\"4\"\n//     >\n//         <defs>\n//             <linearGradient\n//                 id=\"chipGradient\"\n//                 x1=\"0%\"\n//                 y1=\"0%\"\n//                 x2=\"100%\"\n//                 y2=\"100%\"\n//             >\n//                 <stop\n//                     offset=\"0%\"\n//                     stopColor={chipColor === 'silver' ? '#f4f4f5' : '#FFE177'}\n//                 />\n//                 <stop\n//                     offset=\"50%\"\n//                     stopColor={chipColor === 'silver' ? '#d4d4d8' : '#FFC344'}\n//                 />\n//                 <stop\n//                     offset=\"100%\"\n//                     stopColor={chipColor === 'silver' ? '#71717a' : '#FF8C00'}\n//                 />\n//             </linearGradient>\n//         </defs>\n//         <rect\n//             x=\"10\"\n//             y=\"10\"\n//             width=\"180\"\n//             height=\"130\"\n//             rx=\"20\"\n//             fill=\"url(#chipGradient)\"\n//         />\n//         <path\n//             d=\"M70,15 v40 a20,20 0 0,0 -10,20 a20,20 0 0,0 10,20 v40\"\n//             fill=\"none\"\n//         />\n//         <path\n//             d=\"M130,15 v40 a20,20 0 0,1 10,20 a20,20 0 0,1 -10,20 v40\"\n//             fill=\"none\"\n//         />\n//         <line x1=\"10\" y1=\"55\" x2=\"70\" y2=\"55\" />\n//         <line x1=\"130\" y1=\"55\" x2=\"190\" y2=\"55\" />\n//         <line x1=\"10\" y1=\"95\" x2=\"70\" y2=\"95\" />\n//         <line x1=\"130\" y1=\"95\" x2=\"190\" y2=\"95\" />\n//     </svg>\n// ));\n",
      "type": "registry:ui",
      "target": "components/ui/payment-card-3d.tsx"
    }
  ]
}